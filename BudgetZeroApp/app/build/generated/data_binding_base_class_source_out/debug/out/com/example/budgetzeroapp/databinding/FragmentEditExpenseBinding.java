// Generated by view binder compiler. Do not edit!
package com.example.budgetzeroapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.budgetzeroapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentEditExpenseBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button buttonSave;

  @NonNull
  public final CheckBox checkBoxExpStable;

  @NonNull
  public final DatePicker datePicker;

  @NonNull
  public final EditText editTextExpAmount;

  @NonNull
  public final EditText editTextExpName;

  @NonNull
  public final Spinner spinnerCat;

  @NonNull
  public final TextView textViewExpAmount;

  @NonNull
  public final TextView textViewExpDate;

  @NonNull
  public final TextView textViewExpName;

  @NonNull
  public final TextView textViewExpStable;

  @NonNull
  public final TextView textViewExpType;

  private FragmentEditExpenseBinding(@NonNull RelativeLayout rootView, @NonNull Button buttonSave,
      @NonNull CheckBox checkBoxExpStable, @NonNull DatePicker datePicker,
      @NonNull EditText editTextExpAmount, @NonNull EditText editTextExpName,
      @NonNull Spinner spinnerCat, @NonNull TextView textViewExpAmount,
      @NonNull TextView textViewExpDate, @NonNull TextView textViewExpName,
      @NonNull TextView textViewExpStable, @NonNull TextView textViewExpType) {
    this.rootView = rootView;
    this.buttonSave = buttonSave;
    this.checkBoxExpStable = checkBoxExpStable;
    this.datePicker = datePicker;
    this.editTextExpAmount = editTextExpAmount;
    this.editTextExpName = editTextExpName;
    this.spinnerCat = spinnerCat;
    this.textViewExpAmount = textViewExpAmount;
    this.textViewExpDate = textViewExpDate;
    this.textViewExpName = textViewExpName;
    this.textViewExpStable = textViewExpStable;
    this.textViewExpType = textViewExpType;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentEditExpenseBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentEditExpenseBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_edit_expense, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentEditExpenseBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonSave;
      Button buttonSave = ViewBindings.findChildViewById(rootView, id);
      if (buttonSave == null) {
        break missingId;
      }

      id = R.id.checkBoxExpStable;
      CheckBox checkBoxExpStable = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxExpStable == null) {
        break missingId;
      }

      id = R.id.datePicker;
      DatePicker datePicker = ViewBindings.findChildViewById(rootView, id);
      if (datePicker == null) {
        break missingId;
      }

      id = R.id.editTextExpAmount;
      EditText editTextExpAmount = ViewBindings.findChildViewById(rootView, id);
      if (editTextExpAmount == null) {
        break missingId;
      }

      id = R.id.editTextExpName;
      EditText editTextExpName = ViewBindings.findChildViewById(rootView, id);
      if (editTextExpName == null) {
        break missingId;
      }

      id = R.id.spinner_cat;
      Spinner spinnerCat = ViewBindings.findChildViewById(rootView, id);
      if (spinnerCat == null) {
        break missingId;
      }

      id = R.id.textViewExpAmount;
      TextView textViewExpAmount = ViewBindings.findChildViewById(rootView, id);
      if (textViewExpAmount == null) {
        break missingId;
      }

      id = R.id.textViewExpDate;
      TextView textViewExpDate = ViewBindings.findChildViewById(rootView, id);
      if (textViewExpDate == null) {
        break missingId;
      }

      id = R.id.textViewExpName;
      TextView textViewExpName = ViewBindings.findChildViewById(rootView, id);
      if (textViewExpName == null) {
        break missingId;
      }

      id = R.id.textViewExpStable;
      TextView textViewExpStable = ViewBindings.findChildViewById(rootView, id);
      if (textViewExpStable == null) {
        break missingId;
      }

      id = R.id.textViewExpType;
      TextView textViewExpType = ViewBindings.findChildViewById(rootView, id);
      if (textViewExpType == null) {
        break missingId;
      }

      return new FragmentEditExpenseBinding((RelativeLayout) rootView, buttonSave,
          checkBoxExpStable, datePicker, editTextExpAmount, editTextExpName, spinnerCat,
          textViewExpAmount, textViewExpDate, textViewExpName, textViewExpStable, textViewExpType);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
